
@foreach (var item in ViewBag.SensorDeviceCount)
{
    <table id="sensor_table">
        <tr>
            <td>
                <div style="width:1900px; height:200px; margin-left:2px;margin-top:7px;">
                    <div id="chart@(item.WalkID)" style="height:200px; width:99%;"></div>
                </div>
            </td>
        </tr>
    </table>
}
<div id="chartContainer" style="height: 370px; width: 100%;"></div>

@*<script src="~/Content/ScriptView/Chart.js"></script>*@
<script src="~/Scripts/jquery.signalR-2.2.3.min.js"></script>
<script src="~/Scripts/jquery.signalR-2.2.3.js"></script>
<script src="~/signalr/Hubs"></script>

<script src="~/Content/ScriptView/canvasjs.min.js"></script>

<script type="text/javascript">
    $(document).ready(function () {
        var SensorDeviceCount = @Html.Raw(Json.Encode(ViewBag.SensorDeviceCount));
        var SensorGetResult = @Html.Raw(Json.Encode(ViewBag.SensorGetResult));
        var ctx, options, data;
        var sensorResult, sensorYellow, sensorGreen;
        var SensorChart;
        var chart;
        var k = 1;
        var Charts = [];
        SensorDeviceCount.map(function (item) {
            var PointChartSensor = [];
             sensorResult = SensorGetResult.filter(function (sensor) {
                return sensor.WalkID === item.WalkID;
            });
             sensorYellow = SensorGetResult.filter(function (sensor) {
                return sensor.WalkID === item.WalkID && sensor.ResultCorrectError==="Yellow";
            });
             sensorGreen = SensorGetResult.filter(function (sensor) {
                return sensor.WalkID === item.WalkID && sensor.ResultCorrectError === "Green";
            });

            sensorResult.map(function (val) {
                k++;
                return PointChartSensor.push({ x:k, y: parseFloat(val.Value) });
            });

            //var gradient = ctx.createLinearGradient(0, 0, 0, 200);
            //gradient.addColorStop(0, 'rgba(250,174,50,1)');
            //gradient.addColorStop(1, 'rgba(250,174,50,0)');

            //var gradients = ctx.createLinearGradient(0, 0, 0, 200);
            //gradients.addColorStop(0, 'rgba(0,128,0,0.4)');
            //gradients.addColorStop(1, 'rgba(0,128,0,0)');

            chart = new CanvasJS.Chart("chart" + item.WalkID, {
                theme: "light2",
                 animationEnabled: false,
                 zoomEnabled: true,
                 axisY: {
                     includeZero: false
                },
                axisX: {
                    valueFormatString: ""
                },
                data: [{
                    type: "spline",
                    color: "rgba(54,158,173,.7)",
                    dataPoints: PointChartSensor
                }]
            });
            chart.render();

            Charts.push({ charts: chart, dataPoint: PointChartSensor, WalkID: item.WalkID, chartLenght: PointChartSensor.length });

        var con = $.hubConnection(); // shecdomebit washla daxatva xazebis
            var hub = con.createHubProxy('hubMessage');
            var ChartLine =1;
        hub.on('onHitRecorded', function (i) {
            if (i.GetTrap == "get") {
               updateData(data,i);
            }
        });
        con.start();

            function updateData(data, value) {
            //PointChartSensor = [];
            //SensorGetResult.push(value);
            //sensorResult = SensorGetResult.filter(function (sensor) {
            //    return sensor.WalkID === value.WalkID;
            //});

            //sensorResult.map(function (val) {
            //    k++;
            //     PointChartSensor.push({ x: k, y: parseFloat(val.Value) });
            //    });

                //if (PointChartSensor.length > 20) {
                 
                //    PointChartSensor.shift();
                //}

               
                //k++;
                //PointChartSensor.push({ x: k, y: parseFloat(value.Value) });

                //chart = new CanvasJS.Chart("chart" + value.WalkID);
                //chart.options.data.dataPoints[0]= PointChartSensor;
               // chart.options.data[0].dataPoints= PointChartSensor;

                //chart = new CanvasJS.Chart("chart" + value.WalkID, {
                //    theme: "light2",
                //    animationEnabled: false,
                //    zoomEnabled: true,
                //    axisY: {
                //        includeZero: false
                //    },
                //    axisX: {
                //        valueFormatString: ""
                //    },
                //    data: [{
                //        //xValueType: "dateTime",
                //        //xValueFormatString: "hh:mm:ss TT",
                //        showInLegend: true,
                //        type: "spline",
                //        color: "rgba(54,158,173,.7)",
                //        dataPoints: PointChartSensor
                //    }]
                //});

                updateChart = Charts.filter(function (ch) {
                    return ch.WalkID === value.WalkID
                });

                k++;
                //var pointSensor = updateChart[0].PointChartSensor;
                //alert(pointSensor)
              //  pointSensor.push({ x: k, y: parseFloat(value.Value) });
                updateChart[0].dataPoint.push({ x: k, y: parseFloat(value.Value) });
                updateChart[0].charts.render();
             //   chart.render();
        };
        });

    });
</script>
