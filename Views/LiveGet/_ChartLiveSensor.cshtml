@*@model  System.Collections.Generic.IEnumerable<AdminPanelDevice.Models.ChartSensorList>

@foreach (var item in ViewBag.SensorDeviceCount)
{*@
  @foreach (var item in ViewBag.SensorDeviceCount)
   {
<table id="sensor_table">
    <tr>
        <td>
            <div style="width:1900px; height:200px; margin-left:2px;margin-top:7px;">
                <canvas id="chart@(item.WalkID)" width="1900" height="200" style="background: #4c4c4c;background: -moz-linear-gradient(top, #4c4c4c 0%, #666666 25%, #1c1c1c 62%, #131313 100%);background: -webkit-linear-gradient(top, #4c4c4c 0%,#666666 25%,#1c1c1c 62%,#131313 100%);background: linear-gradient(to bottom, #4c4c4c 0%,#666666 25%,#1c1c1c 62%,#131313 100%);filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#4c4c4c', endColorstr='#131313',GradientType=0 );"></canvas>
            </div>
        </td>
    </tr>
</table>
   }
@*}*@
<script src="~/Content/ScriptView/Chart.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        var SensorDeviceCount = @Html.Raw(Json.Encode(@ViewBag.SensorDeviceCount));
        var SensorGetResult = @Html.Raw(Json.Encode(@ViewBag.SensorGetResult));
        SensorDeviceCount.map(function (item) {

            var sensorResult = SensorGetResult.filter(function (sensor) {
                return sensor.WalkID === item.WalkID;
            });          
            var sensorYellow = SensorGetResult.filter(function (sensor) {
                return sensor.WalkID === item.WalkID && sensor.ResultCorrectError==="Yellow";
            });  
            var sensorGreen = SensorGetResult.filter(function (sensor) {
                return sensor.WalkID === item.WalkID && sensor.ResultCorrectError === "Red";
            });
           
            var ctx = document.getElementById("chart" + item.WalkID).getContext("2d");

            var gradient = ctx.createLinearGradient(0, 0, 0, 200);
            gradient.addColorStop(0, 'rgba(250,174,50,2)');
            gradient.addColorStop(1, 'rgba(250,174,50,0)');

            var gradients = ctx.createLinearGradient(0, 0, 0, 200);
            gradient.addColorStop(0, 'rgba(0,128,0,0.4)');
            gradient.addColorStop(1, 'rgba(0,128,0,0)');


            var data = {
                labels: sensorYellow.map(function (Val) { return Val.Value }),
                datasets: [{
                    fillColor: gradient, // Put the gradient here as a fill color
                    strokeColor: "#ff6c23",
                    pointColor: "#fff",
                    pointStrokeColor: "#ff6c23",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "#ff6c23",
                    data: sensorYellow.map(function (Val) { return Val.Value }),
                },
                    {
                        fillColor: gradients, // Put the gradient here as a fill color
                        strokeColor: "#ffff00",
                        pointColor: "#fff",
                        pointStrokeColor: "#ffff00",
                        pointHighlightFill: "#ffff00",
                        pointHighlightStroke: "#ff6c23",
                        data: sensorGreen.map(function (Val) { return Val.Value })
                    }
                ]
            };

         
         
            var options = {
                responsive: true,
                pointDotRadius: 0,
                scaleShowVerticalLines: false,
                datasetStrokeWidth: 1,
                pointDotStrokeWidth: 2,
                tooltipCornerRadius: 6,
                tooltipFillColor: "rgba(120,0,0,0.8)",
                tooltipFontStyle: "bold",
                tooltipTemplate: "<%if (label){%><%=label%> <%}%>",
                scaleLabel: "<%= Number(value).toFixed(0).replace('.', ',') + ''%>"
            };
            new Chart(ctx).Line(data, options);
        });
    });
</script>
